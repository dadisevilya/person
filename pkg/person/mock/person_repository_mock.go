// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/person/person_repository.go

// Package mock_person is a generated GoMock package.
package mock_person

import (
	gomock "github.com/golang/mock/gomock"
	person "github.com/gtforge/go-skeleton-draft/structure/pkg/person"
	reflect "reflect"
)

// MockPersonRepository is a mock of PersonRepository interface
type MockPersonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPersonRepositoryMockRecorder
}

// MockPersonRepositoryMockRecorder is the mock recorder for MockPersonRepository
type MockPersonRepositoryMockRecorder struct {
	mock *MockPersonRepository
}

// NewMockPersonRepository creates a new mock instance
func NewMockPersonRepository(ctrl *gomock.Controller) *MockPersonRepository {
	mock := &MockPersonRepository{ctrl: ctrl}
	mock.recorder = &MockPersonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersonRepository) EXPECT() *MockPersonRepositoryMockRecorder {
	return m.recorder
}

// GetPersons mocks base method
func (m *MockPersonRepository) GetPersons() ([]person.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersons")
	ret0, _ := ret[0].([]person.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersons indicates an expected call of GetPersons
func (mr *MockPersonRepositoryMockRecorder) GetPersons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersons", reflect.TypeOf((*MockPersonRepository)(nil).GetPersons))
}

// CreatePerson mocks base method
func (m *MockPersonRepository) CreatePerson(person *person.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", person)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePerson indicates an expected call of CreatePerson
func (mr *MockPersonRepositoryMockRecorder) CreatePerson(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockPersonRepository)(nil).CreatePerson), person)
}

// GetPersonById mocks base method
func (m *MockPersonRepository) GetPersonById(id int64) (*person.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonById", id)
	ret0, _ := ret[0].(*person.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonById indicates an expected call of GetPersonById
func (mr *MockPersonRepositoryMockRecorder) GetPersonById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonById", reflect.TypeOf((*MockPersonRepository)(nil).GetPersonById), id)
}

// UpdatePerson mocks base method
func (m *MockPersonRepository) UpdatePerson(id int64, createPersonRequest *person.CreatePersonRequest) (*person.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", id, createPersonRequest)
	ret0, _ := ret[0].(*person.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePerson indicates an expected call of UpdatePerson
func (mr *MockPersonRepositoryMockRecorder) UpdatePerson(id, createPersonRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPersonRepository)(nil).UpdatePerson), id, createPersonRequest)
}

// DeletePerson mocks base method
func (m *MockPersonRepository) DeletePerson(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerson indicates an expected call of DeletePerson
func (mr *MockPersonRepositoryMockRecorder) DeletePerson(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPersonRepository)(nil).DeletePerson), id)
}
